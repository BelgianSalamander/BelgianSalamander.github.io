const DATA = [977933068523288, 816649646067548, 857292179022167, 345370203779968, 684577678490932, 1063860710286596, 744152047633462, 935590339014396, 465599524964258, 452519781946019, 416147676205559, 440913681501158, 936778853579934, 235007825501234, 51234331316710, 842048184786663, 619361610730130, 684820321974907, 961899301937852, 967347963872169, 497712735062989, 613096631104791, 81212916236420, 598041253778542, 888384250718634, 134563403834012, 866551315261323, 729793799291536, 464766973366024, 715442973679305, 418445588335867, 490339265346347, 742771232155587, 279680505987985, 1060380942100450, 528520084207746, 523138705371385, 374167289374804, 794080461944981, 374447139532270, 705732426085479, 726515346988699, 388097315289797, 705530322243678, 936691318469149, 630026890492354, 210686466791437, 1026213957460237, 454063478106973, 427631140938915, 125832674949265, 115285460239028, 532508651647043, 174284449565189, 659043291309739, 622293508701244, 754652241030761, 811317219619027, 556277426455516, 826412573313588, 497905095270172, 231802767742639, 848244334074003, 1090414167490123, 444156434341039, 285935249373485, 189501187098356, 25785977048814, 175958658461161, 1023666972016970, 1063264938061335, 562976634936790, 776917999572290, 574800567333482, 143924388849700, 159974984793978, 835334288617045, 492314826158581, 396055904536119, 502900293088822, 650214834562554, 717297039728409, 385694199430269, 150300011331685, 804664151363361, 304943163968842, 483886292604055, 713540007119773, 491854927059147, 6318966610670, 128052914614652, 649717139873276, 364734393099090, 888896849419150, 208846070221943, 736453131576381, 878205375599770, 64385971724059, 649119144146772, 607613524749723, 138668400372436, 736369378633343, 730930857261232, 370616190784211, 519905044750049, 430036373575760, 976971741356070, 114230653475022, 1072403112953888, 200890471808425, 801975512879029, 232974878528148, 1064780540174451, 1053001994043202, 842797018262489, 451093035941321, 283835565278526, 162262008148046, 758385694034387, 61886250835082, 427100131782242, 345647748170605, 419676887329405, 883731132116374, 907318858616533, 572527019074815, 545859708901875, 1095909094129051, 641873862073006, 445405028779632, 669864111611688, 831022104050596, 1096330746858951, 298753984963293, 730218964799338, 1113213607991041, 609090160615641, 475051813650024, 882857699932131, 519621588409211, 420457276758931, 354762586397534, 790630850058231, 471881349614717, 492477257027120, 1035711494836593, 1042691115175174, 240251480385516, 672814316001355, 1068165544218370, 1071188150047648, 748707458404095, 889546710081904, 660186360637950, 15131106074255, 829558301205995, 402431667437059, 1105675778073991, 255910054516019, 1069105516801973, 676814811016600, 91149225019989, 277592321620487, 533792287511041, 1005340618385465, 211073699634059, 278495370153290, 395046733421812, 357092269101078, 837113576556027, 477278833474102, 175400832469910, 270462909583880, 100246846802578, 809352281893775, 177402524022449, 412558904894857, 542975830541953, 366315303449048, 713711037813540]

const ROWS = 50
const COLS = 180

let grid = new Array(ROWS).fill(0).map(() => new Array(COLS).fill(false));
let writeGrid = new Array(ROWS).fill(0).map(() => new Array(COLS).fill(false));

for (let col = 0; col < COLS; col++) {
    let m = DATA[col];
    for (let row = 0; row < ROWS; row++) {
        grid[row][col] = m % 2 == 1;
        m = Math.floor(m / 2);
    }
}

function renderGrid() {
    const canvas = golcanvas;

    let canvasWidth = canvas.width;
    let canvasHeight = canvas.height;

    let sizeForWidth = canvasWidth / COLS;
    let sizeForHeight = canvasHeight / ROWS;

    let cellSize = Math.min(sizeForWidth, sizeForHeight);

    let xOffset = (canvasWidth - cellSize * COLS) / 2;
    let yOffset = (canvasHeight - cellSize * ROWS) / 2;

    let ctx = canvas.getContext("2d");

    ctx.clearRect(0, 0, canvasWidth, canvasHeight);

    ctx.fillStyle = "#6f2f94";

    for (let i = 0; i < COLS; i++) {
        for (let j = 0; j < ROWS; j++) {
            const fudge = 0.5;
            if (grid[j][i]) {
                ctx.fillRect(xOffset + i * cellSize - fudge, yOffset + j * cellSize - fudge, cellSize + 2 * fudge, cellSize + 2 * fudge);
            }
        }
    }
}

function updateGOL() {
    let aliveRules = new Array(9).fill(false);
    let deadRules = new Array(9).fill(false);

    aliveRules[2] = true;
    aliveRules[3] = true;
    deadRules[3] = true;
    
    for (let i = 0; i < ROWS; i++) {
        for (let j = 0; j < COLS; j++) {
            let neighbors = 0;

            for (let x = i - 1; x <= i + 1; x++) {
                for (let y = j - 1; y <= j + 1; y++) {
                    if (x === i && y === j) {
                        continue;
                    }

                    if (x < 0 || x >= ROWS || y < 0 || y >= COLS) {
                        continue;
                    }

                    if (grid[x][y]) {
                        neighbors++;
                    }
                }
            }

            writeGrid[i][j] = grid[i][j];

            if (grid[i][j]) {
                writeGrid[i][j] = aliveRules[neighbors];
            } else {
                writeGrid[i][j] = deadRules[neighbors];
            }
        }
    }

    let temp = grid;
    grid = writeGrid;
    writeGrid = temp;

    renderGrid();
}

window.onload = () => {
    renderGrid();

    let cnt = 10;
    const t = 300;
    let callback = () => {
        if (cnt) {
            updateGOL();
        }
        cnt -= 1;
        if (cnt) {
            setTimeout(callback, t);
        }
    };
    setTimeout(callback, t);
}